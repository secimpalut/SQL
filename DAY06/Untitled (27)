CREATE TABLE employees3 
(  
  id number(9), 
  name varchar2(50), 
  state varchar2(50), 
  salary number(20),
  company varchar2(20)
);

INSERT INTO employees3 VALUES(123456789, 'John Walker', 'Florida', 2500, 'IBM');
INSERT INTO employees3 VALUES(234567890, 'Brad Pitt', 'Florida', 1500, 'APPLE');
INSERT INTO employees3 VALUES(345678901, 'Eddie Murphy', 'Texas', 3000, 'IBM');
INSERT INTO employees3 VALUES(456789012, 'Eddie Murphy', 'Virginia', 1000, 'GOOGLE');
INSERT INTO employees3 VALUES(567890123, 'Eddie Murphy', 'Texas', 7000, 'MICROSOFT');
INSERT INTO employees3 VALUES(456789012, 'Brad Pitt', 'Texas', 1500, 'GOOGLE');
INSERT INTO employees3 VALUES(123456710, 'Mark Stone', 'Pennsylvania', 2500, 'IBM');

--Note: When you use "UNION", "UNION ALL", "INTERSECT", "MINUS", you need to be carefull about
--1)The number of coumns of both queries should be same, otherwise SQL gives error like "query block has incorrect number of result columns"
SELECT name, state
FROM employees3

UNION

SELECT name, state, salary
FROM employees3;

--2)Data types of corresponding columns should match, otherwise SQL gives error like "expression must have same datatype as corresponding expression"
SELECT name, state
FROM employees3

UNION

SELECT name, salary
FROM employees3;

--Trick: Following code works, because given rules above is fine
SELECT name, state
FROM employees3

UNION

SELECT state, name
FROM employees3;

SELECT * FROM orders1;


--2)LEFT JOIN: Returns all data from the first table
--When y ou use LEFT JOIN orders, of tables are important, it affects the result
SELECT c.company_name, o.order_id, o.order_date
FROM companies1 c LEFT JOIN orders1 o
ON c.company_id = o.company_id;


--3)RIGHT JOIN: Returns all data from the second table
--When y ou use RIGHT JOIN, orders of tables are important, it affects the result
SELECT c.company_name, o.order_id, o.order_date
FROM companies1 c RIGHT JOIN orders1 o
ON c.company_id = o.company_id;

--Note: SET OPERATIONs are used to join the result of SELECT Queries
--      JOINs are used to join tables


--4)FULL JOIN: It will return all data from both tables.
--             Repeated data will be displayed just once
SELECT c.company_name, o.order_id, o.order_date
FROM companies1 c FULL JOIN orders1 o
ON c.company_id = o.company_id;

--5)SELF JOIN: We use just a single table
CREATE TABLE employees2 
(  
  id number(2), 
  name varchar2(20),
  title varchar2(60),
  manager_id number(2) 
);

INSERT INTO employees2 VALUES(1, 'Ali Can', 'SDET', 2);
INSERT INTO employees2 VALUES(2, 'John Walker', 'QA', 3);
INSERT INTO employees2 VALUES(3, 'Angie Star', 'QA Lead', 4);
INSERT INTO employees2 VALUES(4, 'Amy Sky', 'CEO', 5);

SELECT t1.name AS emp_name, t2.name AS mng_name
FROM employees2 t1 INNER JOIN employees2 t2
ON t1.manager_id = t2.id;

--PIVOT Clause: It is used to make record data column name
CREATE TABLE customers_products
( 
  product_id number(10),
  customer_name varchar2(50),
  product_name varchar2(50)
);

INSERT INTO customers_products VALUES (10, 'Mark', 'Orange');
INSERT INTO customers_products VALUES (10, 'Mark', 'Orange');
INSERT INTO customers_products VALUES (20, 'John', 'Apple');
INSERT INTO customers_products VALUES (30, 'Amy', 'Palm');
INSERT INTO customers_products VALUES (20, 'Mark', 'Apple');
INSERT INTO customers_products VALUES (10, 'Adem', 'Orange');
INSERT INTO customers_products VALUES (40, 'John', 'Apricot');
INSERT INTO customers_products VALUES (20, 'Eddie', 'Apple');

--Display which customer bought how many orange, how many apple, etc.
SELECT *
FROM (SELECT customer_name, product_name FROM customers_products)

PIVOT

(COUNT(product_name) FOR product_name IN('Orange', 'Apple', 'Palm', 'Apricot'));

--Display which product is bought how many times by which customer
SELECT *
FROM (SELECT product_name, customer_name FROM customers_products)

PIVOT

(COUNT(customer_name) FOR customer_name IN('Mark', 'Amy', 'John'));


--HOW TO ALTER TABLES

--1)How to add column or columns into a table?
ALTER TABLE customers_products
ADD lastname varchar2(25);

ALTER TABLE customers_products
ADD address varchar2(80);

--How to add multiple columns?
ALTER TABLE customers_products
ADD (county varchar2(15), city varchar2(15));

--How to add columns with a default value?
ALTER TABLE customers_products
ADD country varchar2(15) DEFAULT 'The USA';

--2)How to drop a single column?
ALTER TABLE customers_products
DROP COLUMN lastname;

--How to drop multiple columns?
ALTER TABLE customers_products
DROP (address, county);

ALTER TABLE customers_products
DROP (city, country);

--3)How to rename a column?
ALTER TABLE customers_products
RENAME COLUMN product_name TO fruit_name;

--4)How to rename a table?
ALTER TABLE customers_products
RENAME TO c_p;

SELECT * FROM c_p;

--5)How to modify a column structure
ALTER TABLE c_p
MODIFY fruit_name varchar2(20) NOT NULL;

--Add Price Column to c_p table with default value 0.00
ALTER TABLE c_p
ADD price number(4,2);

--Modify the Price Column by using UNIQUE Constraint, make the precision 5 and scale 2
ALTER TABLE c_p
MODIFY price number(5,2) UNIQUE;

--Drop the Price Column
ALTER TABLE c_p
DROP COLUMN price;

--6)How to modify multiple columns
--To modify data type of a column, the column should not have any data in it, all data should be null
--You get the error ==> "column to be modified must be empty to change datatype"

--To modify data size of a column you can just increase, if you want to decrease all data in the column must be null
--otherwise you get error like "column to be modified must be empty to decrease precision or scale"
ALTER TABLE c_p
MODIFY (customer_name varchar2(151), product_id number(20,5));
